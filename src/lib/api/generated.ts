/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint
         *
         *     Returns API status, version, uptime and dependency checks
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ping
         * @description Simple ping endpoint for basic availability check
         */
        get: operations["ping_ping_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schema/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validate Schema
         * @description Validate database schema according to P1.1 requirements
         *
         *     Performs comprehensive validation of:
         *     - Required tables (chunks, embeddings) exist
         *     - Required indexes (BM25 GIN, Vector IVFFLAT) exist
         *     - RLS policies are enabled and configured
         *
         *     Returns detailed validation results for debugging and monitoring.
         */
        get: operations["validate_schema_schema_validate_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/docs/ingest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ingest Document
         * @description Start document ingestion process
         *
         *     Initiates background processing of uploaded document:
         *     1. Extract text content from PDF/DOCX
         *     2. Create chunks with optimal size/overlap
         *     3. Generate embeddings via OpenAI
         *     4. Store in database with RLS protection
         *
         *     Returns job ID for status tracking.
         */
        post: operations["ingest_document_api_v1_docs_ingest_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/docs/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Document Status
         * @description Get document processing status
         *
         *     Returns current processing state and progress information.
         *     Possible states: pending, processing, completed, failed
         */
        get: operations["get_document_status_api_v1_docs_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/docs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Documents
         * @description List user's documents
         *
         *     Returns paginated list of user's uploaded documents with processing status.
         */
        get: operations["list_documents_api_v1_docs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/docs/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Document
         * @description Delete document and all associated data
         *
         *     Removes document, chunks, and embeddings. This action is irreversible.
         */
        delete: operations["delete_document_api_v1_docs__document_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rag/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rag Query
         * @description Query document using RAG (Retrieval Augmented Generation)
         *
         *     Process:
         *     1. Generate embedding for user question
         *     2. Perform hybrid search (BM25 + vector similarity)
         *     3. Retrieve top relevant chunks as context
         *     4. Generate answer using LLM with retrieved context
         *     5. Return answer with source citations
         *
         *     This is the core StudyRAG functionality for document Q&A.
         */
        post: operations["rag_query_api_v1_rag_query_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rag/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search Document
         * @description Search document without LLM generation
         *
         *     Performs hybrid search (BM25 + vector) and returns ranked chunks
         *     without generating an answer. Useful for:
         *     - Finding specific information quickly
         *     - Debugging search relevance
         *     - Building custom interfaces
         */
        post: operations["search_document_api_v1_rag_search_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rag/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Chat Sessions
         * @description Get chat sessions for a document
         *
         *     Returns all chat sessions for the specified document.
         */
        get: operations["get_chat_sessions_api_v1_rag_sessions_get"];
        put?: never;
        /**
         * Create Chat Session
         * @description Create a new chat session
         *
         *     Creates a new chat session for the specified document.
         */
        post: operations["create_chat_session_api_v1_rag_sessions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rag/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Chat Messages
         * @description Get messages for a chat session
         *
         *     Returns all messages in the specified chat session.
         */
        get: operations["get_chat_messages_api_v1_rag_messages_get"];
        put?: never;
        /**
         * Create Chat Message
         * @description Create a new chat message
         *
         *     Adds a new message to the specified chat session.
         */
        post: operations["create_chat_message_api_v1_rag_messages_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/quiz/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Quiz
         * @description Generate quiz from document content
         *
         *     Process:
         *     1. Sample relevant chunks from document (spread across sections)
         *     2. Use LLM to generate questions from selected chunks
         *     3. Create mix of question types (MC, True/False, Short Answer)
         *     4. Store quiz for later submission
         *     5. Return questions for user interaction
         *
         *     Generated questions include source references for learning feedback.
         */
        post: operations["generate_quiz_api_v1_quiz_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/quiz/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit Quiz
         * @description Submit quiz answers and get results
         *
         *     Process:
         *     1. Load quiz questions and correct answers
         *     2. Evaluate each submitted answer
         *     3. Calculate score and generate feedback
         *     4. Store results for analytics and progress tracking
         *     5. Return detailed breakdown with explanations
         *
         *     Provides explanations for incorrect answers to support learning.
         */
        post: operations["submit_quiz_api_v1_quiz_submit_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Profile
         * @description Get user profile
         *
         *     Returns the current user's profile information.
         */
        get: operations["get_profile_api_v1_profile_get"];
        /**
         * Update Profile
         * @description Update user profile
         *
         *     Updates the current user's profile information.
         */
        put: operations["update_profile_api_v1_profile_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ChatMessage
         * @description Chat message model
         */
        ChatMessage: {
            /**
             * Id
             * Format: uuid
             * @description Message ID
             */
            id: string;
            /**
             * Sessionid
             * Format: uuid
             * @description Session ID
             */
            sessionId: string;
            /**
             * Role
             * @description Message role (user or assistant)
             */
            role: string;
            /**
             * Content
             * @description Message content
             */
            content: string;
            /**
             * Sources
             * @description Sources/citations
             */
            sources?: {
                [key: string]: unknown;
            } | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Message timestamp
             */
            timestamp: string;
        };
        /**
         * ChatMessageCreateRequest
         * @description Chat message creation request
         */
        ChatMessageCreateRequest: {
            /**
             * Sessionid
             * Format: uuid
             * @description Session ID
             */
            sessionId: string;
            /**
             * Content
             * @description Message content
             */
            content: string;
            /**
             * Role
             * @description Message role (user or assistant)
             */
            role: string;
            /**
             * Sources
             * @description Sources/citations
             */
            sources?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * ChatSession
         * @description Chat session model
         */
        ChatSession: {
            /**
             * Id
             * Format: uuid
             * @description Session ID
             */
            id: string;
            /**
             * Userid
             * Format: uuid
             * @description User ID
             */
            userId: string;
            /**
             * Documentid
             * Format: uuid
             * @description Document ID
             */
            documentId: string;
            /**
             * Title
             * @description Session title
             */
            title: string;
            /**
             * Createdat
             * Format: date-time
             * @description Creation timestamp
             */
            createdAt: string;
            /**
             * Updatedat
             * Format: date-time
             * @description Last update timestamp
             */
            updatedAt: string;
        };
        /**
         * ChatSessionCreateRequest
         * @description Chat session creation request
         */
        ChatSessionCreateRequest: {
            /**
             * Documentid
             * Format: uuid
             * @description Document ID
             */
            documentId: string;
            /**
             * Title
             * @description Session title
             */
            title?: string | null;
        };
        /**
         * Citation
         * @description Citation reference from source document
         * @example {
         *       "chunkId": "660e8400-e29b-41d4-a716-446655440000",
         *       "page": 5,
         *       "relevanceScore": 0.85,
         *       "section": "3.2 Results",
         *       "textSnippet": "The experiment showed significant improvement in performance metrics..."
         *     }
         */
        Citation: {
            /**
             * Chunkid
             * Format: uuid
             * @description Chunk ID for reference
             */
            chunkId: string;
            /**
             * Page
             * @description Page number (if available)
             */
            page?: number | null;
            /**
             * Section
             * @description Section reference (if available)
             */
            section?: string | null;
            /**
             * Textsnippet
             * @description Relevant text snippet
             */
            textSnippet: string;
            /**
             * Relevancescore
             * @description Relevance score (0-1)
             */
            relevanceScore?: number | null;
        };
        /**
         * DocumentListItem
         * @description Document list item for GET /documents
         */
        DocumentListItem: {
            /**
             * Id
             * Format: uuid
             * @description Document ID
             */
            id: string;
            /**
             * Filename
             * @description Original filename
             */
            filename: string;
            /**
             * Title
             * @description Document title
             */
            title?: string | null;
            /**
             * Contenttype
             * @description MIME type
             */
            contentType: string;
            /**
             * Filesizebytes
             * @description File size
             */
            fileSizeBytes?: number | null;
            /**
             * Status
             * @description Processing status
             * @enum {string}
             */
            status: "pending" | "processing" | "completed" | "failed";
            /**
             * Chunkscount
             * @description Number of chunks
             */
            chunksCount?: number | null;
            /**
             * Createdat
             * Format: date-time
             * @description Creation timestamp
             */
            createdAt: string;
            /**
             * Updatedat
             * Format: date-time
             * @description Last update timestamp
             */
            updatedAt: string;
        };
        /**
         * DocumentListResponse
         * @description Document list response
         */
        DocumentListResponse: {
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp?: string;
            /**
             * Trace Id
             * @description Request trace ID for debugging
             */
            trace_id?: string | null;
            /**
             * Documents
             * @description List of documents
             */
            documents: components["schemas"]["DocumentListItem"][];
            /**
             * Totalcount
             * @description Total number of documents
             */
            totalCount: number;
        };
        /**
         * DocumentStatusResponse
         * @description Document processing status response
         * @example {
         *       "chunksCreated": 25,
         *       "documentId": "550e8400-e29b-41d4-a716-446655440000",
         *       "embeddingsCreated": 25,
         *       "progress": 100,
         *       "status": "completed",
         *       "timestamp": "2024-01-01T00:00:00Z"
         *     }
         */
        DocumentStatusResponse: {
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp?: string;
            /**
             * Trace Id
             * @description Request trace ID for debugging
             */
            trace_id?: string | null;
            /**
             * Documentid
             * Format: uuid
             * @description Document ID
             */
            documentId: string;
            /**
             * Status
             * @description Processing status
             * @enum {string}
             */
            status: "pending" | "processing" | "completed" | "failed";
            /**
             * Progress
             * @description Progress percentage (0-100)
             */
            progress?: number | null;
            /**
             * Chunkscreated
             * @description Number of chunks created
             */
            chunksCreated?: number | null;
            /**
             * Embeddingscreated
             * @description Number of embeddings created
             */
            embeddingsCreated?: number | null;
            /**
             * Errormessage
             * @description Error message if failed
             */
            errorMessage?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HealthResponse
         * @description Health check response model
         */
        HealthResponse: {
            /** Status */
            status: string;
            /** Version */
            version: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Uptime Seconds */
            uptime_seconds: number;
            /** Checks */
            checks: {
                [key: string]: unknown;
            };
        };
        /**
         * IngestRequest
         * @description Document ingestion request
         * @example {
         *       "documentId": "550e8400-e29b-41d4-a716-446655440000",
         *       "mime": "application/pdf",
         *       "storagePath": "documents/user123/report.pdf"
         *     }
         */
        IngestRequest: {
            /**
             * Documentid
             * Format: uuid
             * @description Document ID to ingest
             */
            documentId: string;
            /**
             * Storagepath
             * @description Storage path in Supabase Storage
             */
            storagePath: string;
            /**
             * Mime
             * @description MIME type of the document
             */
            mime: string;
        };
        /**
         * IngestResponse
         * @description Document ingestion response
         * @example {
         *       "documentId": "550e8400-e29b-41d4-a716-446655440000",
         *       "jobId": "job_abc123xyz",
         *       "status": "started",
         *       "timestamp": "2024-01-01T00:00:00Z",
         *       "trace_id": "trace_123"
         *     }
         */
        IngestResponse: {
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp?: string;
            /**
             * Trace Id
             * @description Request trace ID for debugging
             */
            trace_id?: string | null;
            /**
             * Status
             * @description Ingestion status
             * @constant
             */
            status: "started";
            /**
             * Documentid
             * Format: uuid
             * @description Document ID being processed
             */
            documentId: string;
            /**
             * Jobid
             * @description Background job ID for tracking
             */
            jobId: string;
        };
        /**
         * ProfileResponse
         * @description Profile response
         */
        ProfileResponse: {
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp?: string;
            /**
             * Trace Id
             * @description Request trace ID for debugging
             */
            trace_id?: string | null;
            /**
             * Id
             * Format: uuid
             * @description Profile ID
             */
            id: string;
            /**
             * Userid
             * Format: uuid
             * @description User ID
             */
            userId: string;
            /**
             * Displayname
             * @description Display name
             */
            displayName?: string | null;
            /**
             * Createdat
             * Format: date-time
             * @description Creation timestamp
             */
            createdAt: string;
            /**
             * Updatedat
             * Format: date-time
             * @description Last update timestamp
             */
            updatedAt: string;
        };
        /**
         * ProfileUpdateRequest
         * @description Profile update request
         * @example {
         *       "displayName": "John Doe"
         *     }
         */
        ProfileUpdateRequest: {
            /**
             * Displayname
             * @description Display name
             */
            displayName?: string | null;
        };
        /**
         * QuizAnswer
         * @description Individual quiz answer submission
         */
        QuizAnswer: {
            /**
             * Questionid
             * @description Question ID
             */
            questionId: string;
            /**
             * Answer
             * @description User's answer
             */
            answer: string;
            /**
             * Timespentseconds
             * @description Time spent on question
             */
            timeSpentSeconds?: number | null;
        };
        /**
         * QuizConfig
         * @description Quiz generation configuration
         * @example {
         *       "difficulty": "medium",
         *       "focusSections": [
         *         "Introduction",
         *         "Methodology",
         *         "Results"
         *       ],
         *       "questionCount": 10,
         *       "questionTypes": [
         *         "multiple_choice",
         *         "true_false"
         *       ]
         *     }
         */
        QuizConfig: {
            /**
             * Questioncount
             * @description Number of questions to generate
             * @default 5
             */
            questionCount: number;
            /**
             * Difficulty
             * @description Quiz difficulty level
             * @default medium
             * @enum {string}
             */
            difficulty: "easy" | "medium" | "hard";
            /**
             * Questiontypes
             * @description Types of questions to generate
             * @default [
             *       "multiple_choice"
             *     ]
             */
            questionTypes: ("multiple_choice" | "true_false" | "short_answer")[];
            /**
             * Focussections
             * @description Specific sections to focus on (optional)
             */
            focusSections?: string[] | null;
        };
        /**
         * QuizGenerateRequest
         * @description Quiz generation request
         */
        QuizGenerateRequest: {
            /**
             * Documentid
             * Format: uuid
             * @description Document ID to generate quiz from
             */
            documentId: string;
            config: components["schemas"]["QuizConfig"];
        };
        /**
         * QuizGenerateResponse
         * @description Quiz generation response
         */
        QuizGenerateResponse: {
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp?: string;
            /**
             * Trace Id
             * @description Request trace ID for debugging
             */
            trace_id?: string | null;
            /**
             * Quizid
             * Format: uuid
             * @description Generated quiz ID
             */
            quizId: string;
            /**
             * Documentid
             * Format: uuid
             * @description Source document ID
             */
            documentId: string;
            /**
             * Questions
             * @description Generated questions
             */
            questions: components["schemas"]["QuizQuestion"][];
            /** @description Configuration used */
            config: components["schemas"]["QuizConfig"];
            /**
             * Expiresat
             * @description Quiz expiration time
             */
            expiresAt?: string | null;
        };
        /**
         * QuizQuestion
         * @description Individual quiz question
         * @example {
         *       "correctAnswer": "Option B",
         *       "difficulty": "medium",
         *       "explanation": "The research clearly states that the main hypothesis focuses on...",
         *       "id": "q1",
         *       "options": [
         *         "Option A",
         *         "Option B",
         *         "Option C",
         *         "Option D"
         *       ],
         *       "question": "What is the main hypothesis of the research?",
         *       "sourceChunkId": "660e8400-e29b-41d4-a716-446655440000",
         *       "type": "multiple_choice"
         *     }
         */
        QuizQuestion: {
            /**
             * Id
             * @description Question ID
             */
            id: string;
            /**
             * Type
             * @description Question type
             * @enum {string}
             */
            type: "multiple_choice" | "true_false" | "short_answer";
            /**
             * Question
             * @description Question text
             */
            question: string;
            /**
             * Options
             * @description Answer options (for multiple choice)
             */
            options?: string[] | null;
            /**
             * Correctanswer
             * @description Correct answer
             */
            correctAnswer: string;
            /**
             * Explanation
             * @description Explanation for the answer
             */
            explanation?: string | null;
            /**
             * Sourcechunkid
             * @description Source chunk for the question
             */
            sourceChunkId?: string | null;
            /**
             * Difficulty
             * @description Question difficulty
             * @enum {string}
             */
            difficulty: "easy" | "medium" | "hard";
        };
        /**
         * QuizResult
         * @description Individual question result
         */
        QuizResult: {
            /**
             * Questionid
             * @description Question ID
             */
            questionId: string;
            /**
             * Useranswer
             * @description User's answer
             */
            userAnswer: string;
            /**
             * Correctanswer
             * @description Correct answer
             */
            correctAnswer: string;
            /**
             * Iscorrect
             * @description Whether answer is correct
             */
            isCorrect: boolean;
            /**
             * Explanation
             * @description Explanation for the answer
             */
            explanation?: string | null;
            /**
             * Pointsearned
             * @description Points earned for this question
             */
            pointsEarned: number;
            /**
             * Maxpoints
             * @description Maximum points for this question
             */
            maxPoints: number;
        };
        /**
         * QuizSubmitRequest
         * @description Quiz submission request
         * @example {
         *       "answers": [
         *         {
         *           "answer": "Option B",
         *           "questionId": "q1",
         *           "timeSpentSeconds": 45.5
         *         }
         *       ],
         *       "quizId": "770e8400-e29b-41d4-a716-446655440000",
         *       "totalTimeSeconds": 300
         *     }
         */
        QuizSubmitRequest: {
            /**
             * Quizid
             * Format: uuid
             * @description Quiz ID
             */
            quizId: string;
            /**
             * Answers
             * @description User's answers
             */
            answers: components["schemas"]["QuizAnswer"][];
            /**
             * Totaltimeseconds
             * @description Total time spent
             */
            totalTimeSeconds?: number | null;
        };
        /**
         * QuizSubmitResponse
         * @description Quiz submission response with results
         * @example {
         *       "correctAnswers": 8,
         *       "maxScore": 10,
         *       "passed": true,
         *       "percentage": 80,
         *       "quizId": "770e8400-e29b-41d4-a716-446655440000",
         *       "results": [],
         *       "score": 8,
         *       "submissionId": "880e8400-e29b-41d4-a716-446655440000",
         *       "timeSpentSeconds": 300,
         *       "timestamp": "2024-01-01T00:00:00Z",
         *       "totalQuestions": 10
         *     }
         */
        QuizSubmitResponse: {
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp?: string;
            /**
             * Trace Id
             * @description Request trace ID for debugging
             */
            trace_id?: string | null;
            /**
             * Quizid
             * Format: uuid
             * @description Quiz ID
             */
            quizId: string;
            /**
             * Submissionid
             * Format: uuid
             * @description Submission ID
             */
            submissionId: string;
            /**
             * Score
             * @description Total score
             */
            score: number;
            /**
             * Maxscore
             * @description Maximum possible score
             */
            maxScore: number;
            /**
             * Percentage
             * @description Score percentage
             */
            percentage: number;
            /**
             * Passed
             * @description Whether the quiz was passed
             */
            passed: boolean;
            /**
             * Results
             * @description Detailed results for each question
             */
            results: components["schemas"]["QuizResult"][];
            /**
             * Totalquestions
             * @description Total number of questions
             */
            totalQuestions: number;
            /**
             * Correctanswers
             * @description Number of correct answers
             */
            correctAnswers: number;
            /**
             * Timespentseconds
             * @description Total time spent
             */
            timeSpentSeconds?: number | null;
        };
        /**
         * RagQuery
         * @description RAG query request
         * @example {
         *       "documentId": "550e8400-e29b-41d4-a716-446655440000",
         *       "includeCitations": true,
         *       "maxChunks": 10,
         *       "question": "What are the main findings of this research?"
         *     }
         */
        RagQuery: {
            /**
             * Documentid
             * Format: uuid
             * @description Document ID to query against
             */
            documentId: string;
            /**
             * Question
             * @description User's question
             */
            question: string;
            /**
             * Maxchunks
             * @description Maximum chunks for context
             * @default 10
             */
            maxChunks: number | null;
            /**
             * Includecitations
             * @description Include citations in response
             * @default true
             */
            includeCitations: boolean;
        };
        /**
         * RagResponse
         * @description RAG response with answer and citations
         * @example {
         *       "answer": "Based on the research findings, the main discoveries include improved performance metrics and significant cost reductions in the proposed methodology.",
         *       "citations": [
         *         {
         *           "chunkId": "660e8400-e29b-41d4-a716-446655440000",
         *           "page": 5,
         *           "relevanceScore": 0.85,
         *           "section": "3.2 Results",
         *           "textSnippet": "The experiment showed significant improvement..."
         *         }
         *       ],
         *       "documentId": "550e8400-e29b-41d4-a716-446655440000",
         *       "modelUsed": "gpt-4o-mini",
         *       "processingTimeMs": 1250.5,
         *       "question": "What are the main findings of this research?",
         *       "timestamp": "2024-01-01T00:00:00Z",
         *       "trace_id": "rag_trace_123"
         *     }
         */
        RagResponse: {
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp?: string;
            /**
             * Trace Id
             * @description Request trace ID for debugging
             */
            trace_id?: string | null;
            /**
             * Answer
             * @description Generated answer to the question
             */
            answer: string;
            /**
             * Citations
             * @description Source citations for the answer
             */
            citations: components["schemas"]["Citation"][];
            /**
             * Question
             * @description Original question for reference
             */
            question: string;
            /**
             * Documentid
             * Format: uuid
             * @description Document ID that was queried
             */
            documentId: string;
            /**
             * Processingtimems
             * @description Processing time in milliseconds
             */
            processingTimeMs?: number | null;
            /**
             * Modelused
             * @description LLM model used for generation
             */
            modelUsed?: string | null;
        };
        /**
         * SchemaValidationResponse
         * @description Schema validation response model
         */
        SchemaValidationResponse: {
            /** Overall Status */
            overall_status: string;
            /** Failed Checks */
            failed_checks: unknown[];
            /** Summary */
            summary: {
                [key: string]: unknown;
            };
            /** Detailed Results */
            detailed_results: {
                [key: string]: unknown;
            };
        };
        /**
         * SearchQuery
         * @description Semantic search query (without LLM generation)
         */
        SearchQuery: {
            /**
             * Documentid
             * Format: uuid
             * @description Document ID to search
             */
            documentId: string;
            /**
             * Query
             * @description Search query
             */
            query: string;
            /**
             * Limit
             * @description Maximum results to return
             * @default 10
             */
            limit: number | null;
            /**
             * Searchtype
             * @description Search type: semantic, bm25, or hybrid
             * @default hybrid
             */
            searchType: string | null;
        };
        /**
         * SearchResponse
         * @description Search results response
         */
        SearchResponse: {
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp?: string;
            /**
             * Trace Id
             * @description Request trace ID for debugging
             */
            trace_id?: string | null;
            /**
             * Results
             * @description Search results
             */
            results: components["schemas"]["SearchResult"][];
            /**
             * Query
             * @description Original search query
             */
            query: string;
            /**
             * Documentid
             * Format: uuid
             * @description Document ID searched
             */
            documentId: string;
            /**
             * Totalchunks
             * @description Total chunks in document
             */
            totalChunks: number;
            /**
             * Searchtype
             * @description Search type used
             */
            searchType: string;
        };
        /**
         * SearchResult
         * @description Individual search result
         */
        SearchResult: {
            /**
             * Chunkid
             * Format: uuid
             * @description Chunk ID
             */
            chunkId: string;
            /**
             * Content
             * @description Chunk content
             */
            content: string;
            /**
             * Score
             * @description Search relevance score
             */
            score: number;
            /**
             * Page
             * @description Page number
             */
            page?: number | null;
            /**
             * Section
             * @description Section reference
             */
            section?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    ping_ping_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    validate_schema_schema_validate_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SchemaValidationResponse"];
                };
            };
        };
    };
    ingest_document_api_v1_docs_ingest_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-Trace-ID"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngestRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IngestResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_document_status_api_v1_docs_status_get: {
        parameters: {
            query: {
                /** @description Document ID to check status for */
                documentId: string;
            };
            header?: {
                authorization?: string | null;
                "X-Trace-ID"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentStatusResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_documents_api_v1_docs_get: {
        parameters: {
            query?: {
                /** @description Maximum number of documents to return */
                limit?: number;
                /** @description Number of documents to skip */
                offset?: number;
            };
            header?: {
                authorization?: string | null;
                "X-Trace-ID"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_document_api_v1_docs__document_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-Trace-ID"?: string | null;
            };
            path: {
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    rag_query_api_v1_rag_query_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-Trace-ID"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RagQuery"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RagResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_document_api_v1_rag_search_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-Trace-ID"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SearchQuery"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_chat_sessions_api_v1_rag_sessions_get: {
        parameters: {
            query: {
                /** @description Document ID to get sessions for */
                documentId: string;
            };
            header?: {
                authorization?: string | null;
                "X-Trace-ID"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatSession"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_chat_session_api_v1_rag_sessions_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-Trace-ID"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatSessionCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatSession"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_chat_messages_api_v1_rag_messages_get: {
        parameters: {
            query: {
                /** @description Session ID to get messages for */
                sessionId: string;
            };
            header?: {
                authorization?: string | null;
                "X-Trace-ID"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatMessage"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_chat_message_api_v1_rag_messages_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-Trace-ID"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatMessageCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_quiz_api_v1_quiz_generate_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-Trace-ID"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuizGenerateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuizGenerateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_quiz_api_v1_quiz_submit_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-Trace-ID"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuizSubmitRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuizSubmitResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_profile_api_v1_profile_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-Trace-ID"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_profile_api_v1_profile_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-Trace-ID"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProfileUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
